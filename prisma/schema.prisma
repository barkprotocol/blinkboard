// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  username      String    @unique
  passwordHash  String
  role          Role      @default(USER)
  profile       Profile?
  tokens        Token[]
  nfts          NFT[]
  transactions  Transaction[]
  gifts         Gift[]
  payments      Payment[]
  swaps         Swap[]
  stakes        Stake[]
  proposals     Proposal[]
  votes         Vote[]
  orders        Order[]
}

model Profile {
  id            String    @id @default(cuid())
  bio           String?
  avatarUrl     String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
}

model Token {
  id            String    @id @default(cuid())
  symbol        String
  name          String
  balance       Float
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  transactions  Transaction[]
}

model NFT {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Transaction {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  type          TransactionType
  amount        Float
  token         Token     @relation(fields: [tokenId], references: [id])
  tokenId       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  fromAddress   String?
  toAddress     String?
  status        TransactionStatus
}

model Gift {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  amount        Float
  tokenSymbol   String
  fromUser      User      @relation(fields: [fromUserId], references: [id])
  fromUserId    String
  toAddress     String
  message       String?
}

model Payment {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  amount        Float
  tokenSymbol   String
  fromUser      User      @relation(fields: [fromUserId], references: [id])
  fromUserId    String
  toAddress     String
  status        PaymentStatus
}

model Swap {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  fromAmount    Float
  fromToken     String
  toAmount      Float
  toToken       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  status        SwapStatus
}

model Stake {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  amount        Float
  tokenSymbol   String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  apy           Float
  status        StakeStatus
}

model Proposal {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  title         String
  description   String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  status        ProposalStatus
  votes         Vote[]
}

model Vote {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  proposal      Proposal  @relation(fields: [proposalId], references: [id])
  proposalId    String
  voteType      VoteType
}

model Order {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus
}

model OrderItem {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  productName   String
  quantity      Int
  price         Float
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  TRANSFER
  SWAP
  MINT
  BURN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SwapStatus {
  PENDING
  COMPLETED
  FAILED
}

enum StakeStatus {
  ACTIVE
  UNSTAKED
}

enum ProposalStatus {
  ACTIVE
  PASSED
  REJECTED
  EXECUTED
}

enum VoteType {
  FOR
  AGAINST
  ABSTAIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}