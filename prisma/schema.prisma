// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  name                     String?
  email                    String               @unique
  emailVerified            DateTime?
  image                    String?
  account                  Account?
  role                     Role                 @relation(fields: [roleId], references: [id])
  roleId                   String
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  lastLogin                DateTime?
  twoFactorEnabled         Boolean              @default(false)
  twoFactorSecret          String?
  passwordHash             String
  collections              Collection[]
  marketplaceListings      MarketplaceListing[]
  orders                   Order[]
  reviews                  Review[]
  notifications            Notification[]
  followers                Follow[]             @relation("Following")
  following                Follow[]             @relation("Followers")
  createdCrowdfundings     Crowdfunding[]       @relation("CreatedCrowdfundings")
  contributedCrowdfundings Crowdfunding[]       @relation("ContributedCrowdfundings")
  sentGifts                Gift[]               @relation("SentGifts")
  receivedGifts            Gift[]               @relation("ReceivedGifts")
  memos                    Memo[]
  posts                    Post[]
  profile                  Profile?
  subscriptions            Subscription[]
  bids                     Bid[]
  liquidityProvided        LiquidityProvider[]
  swaps                    SwapTransaction[]
  status                   UserStatus           @default(ACTIVE)

  @@index([email])
  @@index([roleId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Account {
  id                String             @id @default(cuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id])
  walletAddress     String             @unique
  balance           Decimal            @db.Decimal(18, 9)
  tokenBalance      Decimal            @db.Decimal(18, 6)
  ownedCNFTs        CNFT[]
  ownedNFTs         NFT[]
  ownedBlinks       Blink[]
  transactions      Transaction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  passwordResets    PasswordReset[]
  solanaActions     SolanaAction[]
  blinkExecutions   BlinkExecutionLog[]
  stakedAssets      StakedAsset[]
  rewardsEarned     Reward[]
  achievements      Achievement[]
  tradingVolume     Decimal            @db.Decimal(18, 2) @default(0)
  referralCode      String?            @unique
  referredBy        String?
  referralRewards   ReferralReward[]

  @@index([walletAddress])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique

  @@index([userId])
}

model CNFT {
  id            String       @id @default(cuid())
  name          String
  description   String
  image         String
  owner         Account      @relation(fields: [ownerId], references: [id])
  ownerId       String
  mintAddress   String       @unique
  metadata      Json
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isCompressed  Boolean      @default(true)
  merkleTree    String?
  assetId       String?      @unique
  compressionId String?      @unique
  staking       StakedAsset?

  @@index([ownerId])
  @@index([mintAddress])
}

model NFT {
  id                String               @id @default(cuid())
  name              String
  description       String
  image             String
  owner             Account              @relation(fields: [ownerId], references: [id])
  ownerId           String
  mintAddress       String               @unique
  metadata          Json
  collection        Collection?          @relation(fields: [collectionId], references: [id])
  collectionId      String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  transactions      Transaction[]
  listings          MarketplaceListing[]
  royaltyPercentage Decimal              @db.Decimal(5, 2)
  isLocked          Boolean              @default(false)
  unlockDate        DateTime?
  reviews           Review[]
  attributes        NFTAttribute[]
  rarity            NFTRarity?
  assetId           String?              @unique
  staking           StakedAsset?

  @@index([ownerId])
  @@index([mintAddress])
}

model NFTAttribute {
  id     String @id @default(cuid())
  nft    NFT    @relation(fields: [nftId], references: [id])
  nftId  String
  trait  String
  value  String
  rarity Float?

  @@unique([nftId, trait])
}

model NFTRarity {
  id    String @id @default(cuid())
  nft   NFT    @relation(fields: [nftId], references: [id])
  nftId String @unique
  score Float
  rank  Int
}

model Blink {
  id                String               @id @default(cuid())
  name              String
  description       String
  owner             Account              @relation(fields: [ownerId], references: [id])
  ownerId           String
  mintAddress       String               @unique
  metadata          Json
  rarity            BlinkRarity
  collection        Collection?          @relation(fields: [collectionId], references: [id])
  collectionId      String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  transactions      Transaction[]
  listings          MarketplaceListing[]
  attributes        BlinkAttribute[]
  royaltyPercentage Decimal              @db.Decimal(5, 2)
  isLocked          Boolean              @default(false)
  unlockDate        DateTime?
  edition           Int?
  maxEdition        Int?
  gifts             Gift[]
  memos             Memo[]
  reviews           Review[]
  assetId           String?              @unique
  staking           StakedAsset?
  blinkType         BlinkType
  powerLevel        Int                  @default(1)
  experience        Int                  @default(0)
  abilities         BlinkAbility[]

  @@index([ownerId])
  @@index([mintAddress])
}

model BlinkAttribute {
  id        String  @id @default(cuid())
  blink     Blink   @relation(fields: [blinkId], references: [id])
  blinkId   String
  traitType String
  value     String
  rarity    Float?

  @@unique([blinkId, traitType])
}

model BlinkAbility {
  id          String @id @default(cuid())
  blink       Blink  @relation(fields: [blinkId], references: [id])
  blinkId     String
  name        String
  description String
  cooldown    Int
  powerCost   Int

  @@unique([blinkId, name])
}

enum BlinkType {
  OFFENSIVE
  DEFENSIVE
  SUPPORT
  UTILITY
}

enum BlinkRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
  UNIQUE
}

model StakedAsset {
  id            String    @id @default(cuid())
  account       Account   @relation(fields: [accountId], references: [id])
  accountId     String
  nft           NFT?      @relation(fields: [nftId], references: [id])
  nftId         String?   @unique
  cnft          CNFT?     @relation(fields: [cnftId], references: [id])
  cnftId        String?   @unique
  blink         Blink?    @relation(fields: [blinkId], references: [id])
  blinkId       String?   @unique
  stakedAt      DateTime  @default(now())
  unstakedAt    DateTime?
  rewardsEarned Decimal   @db.Decimal(18, 6) @default(0)

  @@index([accountId])
}

model Reward {
  id        String     @id @default(cuid())
  account   Account    @relation(fields: [accountId], references: [id])
  accountId String
  amount    Decimal    @db.Decimal(18, 6)
  type      RewardType
  createdAt DateTime   @default(now())

  @@index([accountId])
}

enum RewardType {
  STAKING
  ACHIEVEMENT
  REFERRAL
  GAMEPLAY
}

model Achievement {
  id          String   @id @default(cuid())
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
  name        String
  description String
  unlockedAt  DateTime @default(now())

  @@unique([accountId, name])
}

model ReferralReward {
  id         String   @id @default(cuid())
  referrer   Account  @relation(fields: [referrerId], references: [id])
  referrerId String
  amount     Decimal  @db.Decimal(18, 6)
  createdAt  DateTime @default(now())

  @@index([referrerId])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  nfts        NFT[]
  blinks      Blink[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coverImage  String?
  isVerified  Boolean  @default(false)
  floorPrice  Decimal? @db.Decimal(18, 9)
  totalVolume Decimal? @db.Decimal(18, 9)

  @@index([creatorId])
}

model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  from          Account           @relation(fields: [fromId], references: [id])
  fromId        String
  to            String
  amount        Decimal           @db.Decimal(18, 9)
  tokenAmount   Decimal?          @db.Decimal(18, 6)
  currency      String
  status        TransactionStatus
  txHash        String            @unique
  nft           NFT?              @relation(fields: [nftId], references: [id])
  nftId         String?
  blink         Blink?            @relation(fields: [blinkId], references: [id])
  blinkId       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  fee           Decimal?          @db.Decimal(18, 9)
  gasUsed       Float?
  blockNumber   Int?
  confirmations Int               @default(0)
  metadata      Json?

  @@index([fromId])
  @@index([txHash])
}

enum TransactionType {
  MINT
  TRANSFER
  BURN
  MARKETPLACE_SALE
  AUCTION_SALE
  ROYALTY_PAYMENT
  CROWDFUNDING_CONTRIBUTION
  GIFT
  STAKE
  UNSTAKE
  REWARD_CLAIM
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  PROCESSING
}

model MarketplaceListing {
  id            String        @id @default(cuid())
  seller        User          @relation(fields: [sellerId], references: [id])
  sellerId      String
  nft           NFT?          @relation(fields: [nftId], references: [id])
  nftId         String?
  blink         Blink?        @relation(fields: [blinkId], references: [id])
  blinkId       String?
  price         Decimal       @db.Decimal(18, 9)
  currency      String
  status        ListingStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  expiresAt     DateTime?
  isAuction     Boolean       @default(false)
  startingPrice Decimal?      @db.Decimal(18, 9)
  reservePrice  Decimal?      @db.Decimal(18, 9)
  bids          Bid[]

  @@index([sellerId])
  @@index([status])
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED
  EXPIRED
}

model Bid {
  id        String             @id @default(cuid())
  bidder    User               @relation(fields: [bidderId], references: [id])
  bidderId  String
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])
  listingId String
  amount    Decimal            @db.Decimal(18, 9)
  createdAt DateTime           @default(now())
  status    BidStatus

  @@index([bidderId])
  @@index([listingId])
}

enum BidStatus {
  ACTIVE
  ACCEPTED
  OUTBID
  CANCELLED
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  status          OrderStatus
  total           Decimal     @db.Decimal(18, 9)
  currency        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  shippingAddress String?
  trackingNumber  String?

  @@index([userId])
}

model OrderItem {
  id       String  @id @default(cuid())
  order    Order   @relation(fields: [orderId], references: [id])
  orderId  String
  nftId    String?
  blinkId  String?
  quantity Int
  price    Decimal @db.Decimal(18, 9)
  currency String

  @@index([orderId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  SHIPPED
}

model Review {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  nft        NFT?     @relation(fields: [nftId], references: [id])
  nftId      String?
  blink      Blink?   @relation(fields: [blinkId], references: [id])
  blinkId    String?
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)

  @@index([userId])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  metadata  Json?

  @@index([userId])
  @@index([type])
}

enum NotificationType {
  TRANSACTION
  LISTING
  ORDER
  SYSTEM
  BID
  AUCTION_END
  GIFT
  FOLLOW
  MENTION
  ACHIEVEMENT
  LEVEL_UP
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Crowdfunding {
  id            String             @id @default(cuid())
  title         String
  description   String
  creator       User               @relation("CreatedCrowdfundings", fields: [creatorId], references: [id])
  creatorId     String
  goal          Decimal            @db.Decimal(18, 9)
  currentAmount Decimal            @db.Decimal(18, 9) @default(0)
  currency      String
  startDate     DateTime
  endDate       DateTime
  status        CrowdfundingStatus
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  contributors  User[]             @relation("ContributedCrowdfundings")

  @@index([creatorId])
  @@index([status])
}

enum CrowdfundingStatus {
  ACTIVE
  SUCCESSFUL
  FAILED
  CANCELLED
}

model Gift {
  id         String     @id @default(cuid())
  sender     User       @relation("SentGifts", fields: [senderId], references: [id])
  senderId   String
  receiver   User       @relation("ReceivedGifts", fields: [receiverId], references: [id])
  receiverId String
  blink      Blink      @relation(fields: [blinkId], references: [id])
  blinkId    String
  message    String?
  createdAt  DateTime   @default(now())
  claimedAt  DateTime?
  status     GiftStatus

  @@index([senderId])
  @@index([receiverId])
}

enum GiftStatus {
  PENDING
  CLAIMED
  EXPIRED
}

model Memo {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blink     Blink    @relation(fields: [blinkId], references: [id])
  blinkId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([blinkId])
}

model Subscription {
  id        String             @id @default(cuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  plan      SubscriptionPlan
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

model LiquidityPool {
  id             String              @id @default(cuid())
  name           String
  totalLiquidity Decimal             @db.Decimal(18, 9)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tokens         PoolToken[]
  providers      LiquidityProvider[]
  swaps          SwapTransaction[]
}

model PoolToken {
  id           String        @id @default(cuid())
  poolId       String
  pool         LiquidityPool @relation(fields: [poolId], references: [id])
  tokenAddress String
  balance      Decimal       @db.Decimal(18, 9)
  weight       Decimal       @db.Decimal(5, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([poolId, tokenAddress])
}

model LiquidityProvider {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  poolId          String
  pool            LiquidityPool @relation(fields: [poolId], references: [id])
  amount          Decimal       @db.Decimal(18, 9)
  sharePercentage Decimal       @db.Decimal(5, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, poolId])
}

model SwapTransaction {
  id              String        @id @default(cuid())
  poolId          String
  pool            LiquidityPool @relation(fields: [poolId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  tokenInAddress  String
  tokenOutAddress String
  amountIn        Decimal       @db.Decimal(18, 9)
  amountOut       Decimal       @db.Decimal(18, 9)
  fee             Decimal       @db.Decimal(18, 9)
  createdAt       DateTime      @default(now())

  @@index([poolId])
  @@index([userId])
}

model SolanaAction {
  id            String           @id @default(cuid())
  type          SolanaActionType
  status        ActionStatus
  account       Account          @relation(fields: [accountId], references: [id])
  accountId     String
  signature     String?          @unique
  amount        Decimal?         @db.Decimal(18, 9)
  tokenAmount   Decimal?         @db.Decimal(18, 6)
  fee           Decimal?         @db.Decimal(9, 0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  errorMessage  String?
  metadata      Json?

  @@index([accountId])
  @@index([type])
  @@index([status])
}

enum SolanaActionType {
  TRANSFER_SOL
  TRANSFER_TOKEN
  MINT_NFT
  MINT_CNFT
  BURN_NFT
  BURN_CNFT
  CREATE_BLINK
  TRANSFER_BLINK
  BURN_BLINK
  CREATE_COLLECTION
  UPDATE_METADATA
  STAKE_ASSET
  UNSTAKE_ASSET
}

enum ActionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model BlinkFunction {
  id            String             @id @default(cuid())
  name          String
  description   String
  functionType  BlinkFunctionType
  parameters    Json
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isActive      Boolean            @default(true)
  executionLogs BlinkExecutionLog[]
}

model BlinkExecutionLog {
  id            String        @id @default(cuid())
  function      BlinkFunction @relation(fields: [functionId], references: [id])
  functionId    String
  account       Account       @relation(fields: [accountId], references: [id])
  accountId     String
  input         Json
  output        Json?
  status        ExecutionStatus
  errorMessage  String?
  executedAt    DateTime      @default(now())

  @@index([functionId])
  @@index([accountId])
  @@index([status])
}

enum BlinkFunctionType {
  UTILITY
  GAME_MECHANIC
  SOCIAL_INTERACTION
  MARKETPLACE_ACTION
  ANALYTICS
}

enum ExecutionStatus {
  SUCCESS
  FAILURE
  PENDING
}